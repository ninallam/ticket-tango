name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      location:
        description: 'Azure region'
        required: true
        default: 'East US'
        type: string
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      location:
        required: true
        type: string
  push:
    branches:
      - main
    paths:
      - 'infrastructure/**'

env:
  AZURE_RESOURCE_GROUP: 'tickettango-rg'

permissions:
  id-token: write
  contents: read

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Set environment variables
      shell: pwsh
      run: |
        "ENVIRONMENT=${{ inputs.environment || 'dev' }}" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding UTF8
        "LOCATION=${{ inputs.location || 'East US' }}" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding UTF8
        $deploymentName = "tickettango-deployment-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
        "DEPLOYMENT_NAME=$deploymentName" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding UTF8

    - name: Run Azure PowerShell deployment (pwsh only)
      shell: pwsh
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        SQL_ADMIN_LOGIN: ${{ secrets.SQL_ADMIN_LOGIN }}
        SQL_ADMIN_PASSWORD: ${{ secrets.SQL_ADMIN_PASSWORD }}
      run: |
        # install Az modules if missing
        if (-not (Get-Module -ListAvailable -Name Az)) {
          Install-Module -Name Az -Scope CurrentUser -Force -AllowClobber -Repository PSGallery
        }

        # get an access token from the az CLI (azure/login step authenticated the runner for az)
        $token = az account get-access-token --resource https://management.azure.com/ --query accessToken -o tsv
        if (-not $token) { Write-Error "Failed to acquire access token from az"; exit 1 }

        # connect Az PowerShell using the token
        Connect-AzAccount -AccessToken $token -AccountId $Env:AZURE_CLIENT_ID -TenantId $Env:AZURE_TENANT_ID | Out-Null

        # create resource group
        New-AzResourceGroup -Name $Env:AZURE_RESOURCE_GROUP -Location $Env:LOCATION -Force

        # deploy Bicep
        Push-Location infrastructure
        $deploymentResult = New-AzResourceGroupDeployment `
          -ResourceGroupName $Env:AZURE_RESOURCE_GROUP `
          -Name $Env:DEPLOYMENT_NAME `
          -TemplateFile "main.bicep" `
          -TemplateParameterObject @{
            namePrefix = 'tickettango';
            environment = $Env:ENVIRONMENT;
            location = $Env:LOCATION;
            sqlAdminLogin = $Env:SQL_ADMIN_LOGIN;
            sqlAdminPassword = (ConvertTo-SecureString $Env:SQL_ADMIN_PASSWORD -AsPlainText -Force);
            clientUrl = "";
          }

        # save only deployment properties (avoid serializing SecureString)
        $deploymentResult.Properties | ConvertTo-Json -Depth 10 | Out-File -FilePath "deployment-output.json" -Encoding UTF8
        Pop-Location

    - name: Get deployment outputs
      id: outputs
      shell: pwsh
      run: |
        cd infrastructure
        $deploymentJson = Get-Content "deployment-output.json" | ConvertFrom-Json
        $webAppUrl = $deploymentJson.Properties.Outputs.webAppUrl.Value
        $webAppName = $deploymentJson.Properties.Outputs.webAppName.Value
        $sqlServerName = $deploymentJson.Properties.Outputs.sqlServerName.Value
        
        "web-app-url=$webAppUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding UTF8
        "web-app-name=$webAppName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding UTF8
        "sql-server-name=$sqlServerName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding UTF8
        
        "### Deployment Summary ðŸ“‹" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
        "- **Web App URL**: $webAppUrl" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
        "- **Web App Name**: $webAppName" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
        "- **SQL Server**: $sqlServerName" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
        "- **Resource Group**: ${{ env.AZURE_RESOURCE_GROUP }}" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8
        "- **Environment**: ${{ env.ENVIRONMENT }}" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8

    outputs:
      web-app-url: ${{ steps.outputs.outputs.web-app-url }}
      web-app-name: ${{ steps.outputs.outputs.web-app-name }}
      sql-server-name: ${{ steps.outputs.outputs.sql-server-name }}